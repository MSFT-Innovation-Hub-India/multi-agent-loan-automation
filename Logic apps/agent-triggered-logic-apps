# pip install azure-ai-projects~=1.0.0b7
from azure.ai.projects import AIProjectClient
from azure.identity import DefaultAzureCredential
import time
import requests
import json
import re

project_client = AIProjectClient.from_connection_string(
    credential=DefaultAzureCredential(),
    conn_str="eastus2.api.azureml.ms;aee23923-3bba-468d-8dcd-7c4bc1ce218f;rg-ronakofficial1414-9323_ai;ronakofficial1414-8644")

agent = project_client.agents.get_agent("asst_rFUbLg9vaFgzlw0EAedhBgPf")

# Logic App URL for loan interest reduction
LOGIC_APP_URL = "https://demo1414.azurewebsites.net:443/api/agent/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=HZ0I3n6VpNoP0Ijw691jeFXYwOcT6OtQhJopwfpYvn4"

# Create a new thread for each conversation
def create_new_thread():
    """Create a new thread for the conversation"""
    return project_client.agents.create_thread()

def extract_message_content(text_message):
    """Extract the text content from a message"""
    try:
        if hasattr(text_message, 'text') and hasattr(text_message.text, 'value'):
            return text_message.text.value
        elif isinstance(text_message, dict) and 'text' in text_message and 'value' in text_message['text']:
            return text_message['text']['value']
        else:
            # Try to access as dictionary
            message_dict = text_message.as_dict() if hasattr(text_message, 'as_dict') else text_message
            if isinstance(message_dict, dict) and 'text' in message_dict and 'value' in message_dict['text']:
                return message_dict['text']['value']
    except Exception:
        pass
    
    # Fallback: return the string representation
    return str(text_message)

def display_latest_message(thread_id):
    """Display only the most recent assistant message"""
    messages = project_client.agents.list_messages(thread_id=thread_id)
    
    # Find the most recent assistant message
    latest_message = None
    for message in messages.text_messages:
        message_content = extract_message_content(message)
        latest_message = message_content
        break  # Only get the most recent message (first in the list)
    
    if latest_message:
        print(f"\n🤖 Agent: {latest_message}\n")
    else:
        print("\n🤖 Agent: No response received.\n")

def check_loan_interest_reduction_intent(message_text):
    """Check if the message indicates intent to reduce loan interest"""
    # List of patterns that might indicate interest reduction intent
    interest_reduction_patterns = [
        r"(?i)reduce.*interest",
        r"(?i)lower.*interest.*rate",
        r"(?i)decrease.*interest",
        r"(?i)better.*interest.*rate",
        r"(?i)refinanc.*loan",
        r"(?i)interest.*too high",
        r"(?i)lower.*payment",
        r"(?i)reduce.*payment",
        r"(?i)better.*loan.*rate",
        r"(?i)interest.*reduction"
    ]
    
    for pattern in interest_reduction_patterns:
        if re.search(pattern, message_text):
            return True
    
    return False

def trigger_logic_app_for_interest_reduction(user_info):
    """Trigger the Logic App to process a loan interest reduction request"""
    try:
        # Prepare the payload for the Logic App
        payload = {
            "userMessage": user_info.get("message", ""),
            "userName": user_info.get("name", "User"),
            "loanType": user_info.get("loanType", ""),
            "loanAmount": user_info.get("loanAmount", ""),
            "currentInterestRate": user_info.get("currentRate", ""),
            "requestType": "interest_reduction"
        }
        
        # Call the Logic App with the payload
        headers = {'Content-Type': 'application/json'}
        response = requests.post(LOGIC_APP_URL, json=payload, headers=headers)
        
        # Check if the request was successful
        if response.status_code == 200:
            result = response.json()
            return True, result.get("message", "Your interest reduction request has been submitted successfully.")
        else:
            return False," processing your request. "
            
    except Exception as e:
        return False, f"An error occurred while processing your request: {str(e)}"

def collect_loan_information():
    """Collect information needed for interest reduction request"""
    print("\n📋 To process your interest reduction request, we need some information:")
    
    user_info = {
        "name": input("Your name: "),
        "loanType": input("Loan type (e.g., Mortgage, Auto, Personal): "),
        "loanAmount": input("Current loan amount: "),
        "currentRate": input("Current interest rate (%): ")
    }
    
    return user_info

def interact_with_agent():
    print("="*60)
    print("💬 Interactive Loan Agent Chat 💬")
    print("Type 'exit' or 'quit' to end the conversation")
    print("="*60)
    
    # Create a new thread for this conversation
    thread = create_new_thread()
    print(f"\n🔄 Starting a new conversation thread (ID: {thread.id})")
    
    # Start with a greeting message to get the initial response
    initial_message = project_client.agents.create_message(
        thread_id=thread.id,
        role="user",
        content="Hello, I'd like to learn about loans"
    )
    
    print("\n⏳ Agent is thinking...")
    
    # Process the message
    run = project_client.agents.create_and_process_run(
        thread_id=thread.id,
        agent_id=agent.id
    )
    
    # Display the agent's initial response
    display_latest_message(thread.id)
    
    # Store user context for the conversation
    user_context = {}
    
    # Start the conversation loop
    while True:
        # Get user input
        user_message = input("👤 You: ")
        
        if user_message.lower() in ['exit', 'quit']:
            print("\n👋 Ending conversation. Goodbye!")
            break
        
        # Check if user wants to reduce loan interest
        if check_loan_interest_reduction_intent(user_message):
            print("\n💡 I noticed you're interested in reducing your loan interest rate.")
            print("I can help you with that by submitting a request to our loan department.")
            
            # Ask if user wants to proceed with the interest reduction request
            confirm = input("Would you like to proceed with an interest reduction request? (yes/no): ")
            
            if confirm.lower() in ['yes', 'y', 'sure', 'ok', 'yeah']:
                # Collect necessary information
                user_info = collect_loan_information()
                user_info["message"] = user_message
                
                print("\n⏳ Processing your interest reduction request...")
                
                # Trigger the Logic App
                success, message = trigger_logic_app_for_interest_reduction(user_info)
                
                if success:
                    print(f"\n✅ {message}")
                else:
                    print(f"\n❌ {message}")
                
                # Save the context for future reference
                user_context.update(user_info)
                user_context["interest_reduction_requested"] = True
                
                continue
        
        # Send message to the agent
        message = project_client.agents.create_message(
            thread_id=thread.id,
            role="user",
            content=user_message
        )
        
        print("\n⏳ Agent is thinking...")
        
        # Process the message
        run = project_client.agents.create_and_process_run(
            thread_id=thread.id,
            agent_id=agent.id
        )
        
        # Display the latest message
        display_latest_message(thread.id)

# Start the interactive chat
if __name__ == "__main__":
    interact_with_agent()
